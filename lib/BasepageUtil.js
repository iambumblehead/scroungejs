var fs = require('fs'), // read/write files
    path = require('path'),

    Message = require('./Message.js'),
    FilterTree = require('./FilterTree.js'),
    ScroungeElement = require('./ScroungeElement.js'),
    BMBLib = require('./BMBLib.js');

var BasepageUtil = module.exports = (function () {

  var basepageUtil = {
    basepage : '',
    treeFilter : null,
    scroungeElementObjArr : [],

    getScroungeElementObjArr : function (funchandle) {
      var basepage = this.basepage, objArr = [], x;
      if (!basepage) return funchandle(Message.basepageNotFound());
      fs.readFile(basepage, 'ascii', function (err, fd) {
        if (err) return funchandle(Message.basepageNotFound(basepage));
        objArr = ScroungeElement.getFromMarkup(fd);    
        funchandle(null, objArr);
      });
    },

    getScroungeElementFilters : function (scroungeElemObjArr) {
      var treeFilter = this.treeFilter, x;
      for (x = scroungeElemObjArr.length; x--;) {
        if (scroungeElemObjArr[x].trees.length) {
          treeFilter.addTrees(scroungeElemObjArr[x].trees, scroungeElemObjArr[x].type);
        }
      }
      return treeFilter;
    },

    // load scrounge tags, and filters
    readFilters : function (funchandle) {
      var that = this, filters;
      that.getScroungeElementObjArr(function (err, scroungeElementObjArr) {
        if (err) return funchandle(err);
        filters = that.getScroungeElementFilters(scroungeElementObjArr);
        that.treeFilter = filters;
        funchandle(null, filters);
      });
    },

    getBasepageText : function (basepage, funchandle) {
      fs.readFile(basepage, 'ascii', function(err, fd) {
        if (err) return funchandle(Message.basepageNotFound(basepage));
        funchandle(null, fd);
      });
    },

    writeBasepageText : function (basepage, text, funchandle) {
      fs.writeFile(basepage, text, function (err) {
        if (err) return funchandle(err);
        console.log(Message.writeBasepage(basepage));
        funchandle(null, basepage);
      });          
    },

    // get original include element with single element updates generated by treeObj
    refreshIncludeElements : function (treeObjArr, scroungeElemObjArr, opts, text) {
      var x, y, z, elem, scroungeTag, scroungeElemObj, fObjArr = [], fObj;
      for (x = scroungeElemObjArr.length; x--;) {
        scroungeElemObj = scroungeElemObjArr[x];        

        for (y = treeObjArr.length; y--;) {
          for (z = treeObjArr[y].fileObjArr.length; z--;) {
            fObj = treeObjArr[y].fileObjArr[z];
            text = fObj.getWithUpdatedTag(text, opts);
          }
        }
      }
      return text;      
    },


    // get full include element generated by the treeObj
    refreshTagElements : function (treeObjArr, scroungeElemObjArr, opts, text) {
      var x, y, elem, scroungeTag, scroungeElemObj, tObjArr = [];
      for (x = scroungeElemObjArr.length; x--;) {
        scroungeElemObj = scroungeElemObjArr[x];
        for (y = treeObjArr.length; y--;) {
          if (scroungeElemObj.isTreeMatch(treeObjArr[y].fileInfoObj)) {
            tObjArr.push(treeObjArr[y]);
          }
        }
        elem = scroungeElemObj.buildTagText(tObjArr, opts);
        text = text.replace(scroungeElemObj.elem, elem);      
      }
      return text;
    },

    writeTrees : function (treeObjArr, opts, funchandle) {
      var that = this, basepage = this.basepage, x, elemObjArr;
      that.getBasepageText(basepage, function(err, text) {
        if (err) return funchandle(err);

        elemObjArr = ScroungeElement.getFromMarkup(text);
        if (opts.extnType) {
          elemObjArr = elemObjArr.filter(function (elemObj) {
            return elemObj.type === opts.extnType;
          });
        }

        if (!elemObjArr.length) return funchandle(Message.noScroungeElementFound());

        if (opts.isUpdateOnly) {
          text = that.refreshIncludeElements(treeObjArr, elemObjArr, opts, text);          
        } else {
          text = that.refreshTagElements(treeObjArr, elemObjArr, opts, text);          
        }

        that.writeBasepageText(basepage, text, function (err) {
          if (err) return funchandle(err);
          funchandle(err, basepage);
        });
      });
    }
  };

  return {
    getNew : function (basepage) {
      var that = BMBLib.clone(basepageUtil);
      that.treeFilter = FilterTree.getNew();
      that.basepage = basepage;
      return that;
    } 
  };

}());

