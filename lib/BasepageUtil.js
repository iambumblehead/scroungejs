var fs = require('fs'), // read/write files
    path = require('path'),

    Message = require('./Message.js'),
    FilterTree = require('./FilterTree.js'),
    ScroungeElement = require('./ScroungeElement.js'),
    BMBLib = require('./BMBLib.js');

var BasepageUtil = module.exports = (function () {

  var basepageUtil = {
    basepage : '',
    treeFilter : null,
    scroungeElementObjArr : [],

    // read basepage from disk and return content as string
    getBasepageStr : function (fn) {
      var basepage = this.basepage;
      if (!basepage) return fn(Message.basepageNotFound());
      fs.readFile(basepage, 'ascii', function (err, res) {
        if (err) return fn(Message.basepageNotFound(basepage));
        fn(null, res);
      });      
    },

    // write basepage content to disk
    writeBasepageStr : function (text, fn) {
      var basepage = this.basepage;
      if (!basepage) return fn(Message.basepageNotFound());
      fs.writeFile(basepage, text, function (err) {
        if (err) return fn(err);
        console.log(Message.writeBasepage(basepage));
        fn(null, basepage);
      });          
    },

    getStrAsScroungeElementObjArr : function (str) {
      return ScroungeElement.getFromStrScroungeElemObjArr(str);
    },

    getScroungeElementFilters : function (scroungeElemObjArr) {
      var treeFilter = this.treeFilter, x;
      for (x = scroungeElemObjArr.length; x--;) {
        if (scroungeElemObjArr[x].trees.length) {
          // only place where addTrees is called...
          treeFilter.addTrees(scroungeElemObjArr[x].trees, scroungeElemObjArr[x].type);
        }
      }
      return treeFilter;
    },

    // returns filters from the basepage by 
    //  - reading the basepage,
    //  - getting scrounge elements from basepage
    //  - getting tree attributes from the scrounge elements
    //  - return each tree definition as a filter
    getFilters : function (fn) {
      var that = this, scroungeElemObjArr, filters;
      that.getBasepageStr(function (err, str) {
        if (err) fn(err);
        // should be get trees
        // get trees as filters
        scroungeElemObjArr = that.getStrAsScroungeElementObjArr(str);
        // each scrounge element has type and trees...
        filters = that.getScroungeElementFilters(scroungeElemObjArr);        
        that.treeFilter = filters;
        fn(null, filters);        
      });
    },

    // get original include element with single element updates generated by treeObj
    refreshIncludeElements : function (treeObjArr, scroungeElemObjArr, opts, text) {
      var x, y, z, scroungeElemObj, fObj;
      for (x = scroungeElemObjArr.length; x--;) {
        scroungeElemObj = scroungeElemObjArr[x];        

        for (y = treeObjArr.length; y--;) {
          for (z = treeObjArr[y].fileObjArr.length; z--;) {
            fObj = treeObjArr[y].fileObjArr[z];
            text = fObj.getWithUpdatedTag(text, opts);
          }
        }
      }
      return text;      
    },

    getWithTree : function (fn) {
      
    },

    // get full include element generated by the treeObj    
    getWithScroungeElemsStr : function (treeObjArr, scroungeElemObjArr, opts, text) {
    
      /*
      var x, y, elem, scroungeTag, scroungeElemObj, tObjArr = [];
      for (x = scroungeElemObjArr.length; x--;) {
        scroungeElemObj = scroungeElemObjArr[x];
        for (y = treeObjArr.length; y--;) {
          if (scroungeElemObj.isTreeMatch(treeObjArr[y].fileInfoObj)) {
            tObjArr.push(treeObjArr[y]);
          }
        }

        elem = scroungeElemObj.buildTagText(tObjArr, opts);
        text = text.replace(scroungeElemObj.elem, elem);      
      }
      return text;
       */
    },    

    // get full include element generated by the treeObj
    /*
    getWithScroungeElemsStr : function (treeObjArr, scroungeElemObjArr, opts, text) {
      var x, y, elem, scroungeTag, scroungeElemObj, tObjArr = [];
      for (x = scroungeElemObjArr.length; x--;) {
        scroungeElemObj = scroungeElemObjArr[x];
        for (y = treeObjArr.length; y--;) {
          if (scroungeElemObj.isTreeMatch(treeObjArr[y].fileInfoObj)) {
            tObjArr.push(treeObjArr[y]);
          }
        }

        elem = scroungeElemObj.buildTagText(tObjArr, opts);
        text = text.replace(scroungeElemObj.elem, elem);      
      }
      return text;
    },
     */

    writeTrees : function (treeObjArr, opts, fn) {
      var that = this, elemObjArr;
      that.getBasepageStr(function(err, text) {
        if (err) return fn(err);

        // this check should be performed elsewhere -before write
        /*
        elemObjArr = ScroungeElement.getFromStrScroungeElemObjArr(text, opts);
        if (!elemObjArr.length) return fn(Message.noScroungeElementFound());
         */

        // single include element ELSE full tag w all include elements
        if (opts.isUpdateOnly) {
          //text = that.refreshIncludeElements(treeObjArr, elemObjArr, opts, text);          
          text = that.refreshIncludeElements(treeObjArr, elemObjArr, opts, text);          
        } else {
          text = that.getWithScroungeElemsStr(treeObjArr, elemObjArr, opts, text);          
        }

        that.writeBasepageStr(text, fn);
      });
    }
  };

  return {
    getNew : function (basepage) {
      var that = BMBLib.clone(basepageUtil);
      that.treeFilter = FilterTree.getNew();
      that.basepage = basepage;
      return that;
    } 
  };

}());

