var fs = require('fs'), // read/write files
    path = require('path'),

    Message = require('../Message.js'),
    FilterTree = require('../FilterTree.js'),
    UserOptions = require('../UserOptions.js'),
    ScroungeElem = require('../ScroungeElem.js');

var FileInfoBasepage = module.exports = (function () {

  var fileInfoBasepage = {
    basepage : '',
    treeFilter : null,

    getBasepagePathFull : function () {
      return UserOptions.getFullPath(this.basepage);
    },

    // read basepage from disk and return content as string
    getContentStr : function (fn) {
      var basepage = this.getBasepagePathFull();//this.basepage;
      if (!basepage) return fn(Message.basepageNotFound());
      fs.readFile(basepage, 'utf-8', function (err, res) {
        if (err) return fn(Message.basepageNotFound(basepage));
        fn(null, res);
      });      
    },

    // write basepage content to disk
    writeBasepageStr : function (text, fn) {
      var that = this,
          basepage = this.basepage,
          basepagePathFull = this.getBasepagePathFull();

      if (!basepage) return fn(Message.basepageNotFound());
      fs.writeFile(basepagePathFull, text, function (err) {
        if (err) return fn(err);
        console.log(Message.writeBasepage(basepage));
        fn(null, basepage);
      });          
    },

    getStrAsScroungeElemObjArr : function (str) {
      return ScroungeElem.getFromStrScroungeElemObjArr(str);
    },

    getScroungeElemFilters : function (scroungeElemObjArr) {
      var treeFilter = this.treeFilter, x;

      scroungeElemObjArr.map(function (scroungeElemObj) {
        if (scroungeElemObj.trees.length) {
          treeFilter.addTrees(scroungeElemObj.trees, scroungeElemObj.type);
        }        
      });

      return treeFilter;
    },

    // returns filters from the basepage by 
    //  - reading the basepage,
    //  - getting scrounge elements from basepage
    //  - getting tree attributes from the scrounge elements
    //  - return each tree definition as a filter
    getFilters : function (fn) {
      var that = this, scroungeElemObjArr, filters;

      if (!that.basepage) return fn(null, null);
      that.getContentStr(function (err, str) {
        if (err) fn(err);
        scroungeElemObjArr = that.getStrAsScroungeElemObjArr(str);
        filters = that.getScroungeElemFilters(scroungeElemObjArr);        
        that.treeFilter = filters;
        fn(null, filters);        
      });
    },

    // get original include element with single element updates generated 
    // by treeObj
    refreshIncludeElements : function (treeObjArr, opts, text) {
      var that = this;
      
      treeObjArr.map(function (treeObj) {
        treeObj.fileObjArr.map(function (fileObj) {
          text = that.getWithUpdatedIncludeStr(text, fileObj, opts);
        });
      });

      return text;      
    },

    // precision matching
    // should be moved to scroungeelem namespace.
    // replace the old include elements with new ones.
    // '<script src="/cmpr/app_2013.04.05-21:23:41.js" type="text/javascript"></script>'
    // /app_\d{4}\.\d{2}\.\d{2}-\d{2}:\d{2}:\d{2}.js/
    getWithUpdatedIncludeStr : function (str, infoFileObj, opts) {
      var filenameNew = infoFileObj.getCmprNameStr(opts),
          filenameRe = infoFileObj.getFilenameRe(opts);

      var includeRe, includeTpl;
      if (infoFileObj.type.match(/\.css|\.less/)) {
        includeRe = /<link href="(.*)" rel="stylesheet" type="text\/css">/gi;
        includeTpl = '<link href="$" rel="stylesheet" type="text/css">';
      } else if (infoFileObj.type === '.js') {
        includeRe = /<script src="(.*)" type="text\/javascript"><\/script>/gi;
        includeTpl = '<script src="$" type="text/javascript"></script>';
      }

      return str.replace(includeRe, function (matchFull, m1) {
        return matchFull.replace(filenameRe, filenameNew);
      });
    },

    // get full include element generated by the treeObj    
    getWithScroungeElemsStr : function (treeObjArr, opts, text) {
      var x, elem, scroungeTag, scroungeElemObj, tObjArr = [],
          scroungeElemObjArr = ScroungeElem.getFromStrScroungeElemObjArr(text);

      scroungeElemObjArr.map(function (scroungeElemObj) {
        tObjArr = treeObjArr.filter(function (treeObj) {
          return scroungeElemObj.isTreeMatch(treeObj.fileInfoObj, opts);
        });

        elem = scroungeElemObj.getTreeArrAsScroungeElemStr(tObjArr.reverse(), opts);
        text = text.replace(scroungeElemObj.elem, elem);      
      });
      return text;
    },

    writeTrees : function (treeObjArr, opts, fn) {
      var that = this, elemObjArr;

      if (!that.basepage) return fn(null, null);
      that.getContentStr(function(err, text) {
        if (err) return fn(err);
        // single include element ELSE full tag w all include elements
        if (opts.isUpdateOnly) {
          text = that.refreshIncludeElements(treeObjArr, opts, text);          
        } else {
          text = that.getWithScroungeElemsStr(treeObjArr, opts, text);          
        }

        that.writeBasepageStr(text, fn);
      });
    }
  };

  return {
    getNew : function (opts) {
      var that = Object.create(fileInfoBasepage);
      that.treeFilter = FilterTree.getNew();
      that.basepage = opts.basepage || null;
      return that;
    } 
  };

}());

